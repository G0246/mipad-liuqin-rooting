# 是否配置swapfile
swap=false

# swapfile大小(MB)，部分设备超过2047会开启失败
# 注意，修改swap大小，需要手动删除/data/swapfile，才会重新创建
swap_size=4096

# swapfile使用顺序
#  0 与zram同时使用
# -2 用完zram后再使用
#  5 优先于zram使用）
swap_priority=-2

# 是否将swapfile挂载为回环设备
# 在很多设备上性能表现很差。如非必要，不建议开启
swap_use_loop=false

# 是否配置zram
# 注意: 设为false并不代表禁用zram，而是保持系统默认配置
# 如果你想关闭系统默认开启的zram，则应设为true，并配置zram_size为0
zram=true

# zram大小(MB)，部分设备超过2047会开启失败
zram_size=5734

# zram压缩算法(可设置的值取决于内核支持)
# zstd lz4 lzo lzo-rle性能都很好
comp_algorithm=lz4


# ZRAM Writeback
# default 保持系统默认配置
# true 开启ZRAM Writeback，并由模块配置回写设备
# false 关闭ZRAM Writeback
zram_writeback=false


# 使用SWAP的积极性，0 ~ 200
swappiness=150

# 额外空余内存(kbytes)
# 数值越大越容易触发swap和内存回收
extra_free_kbytes=65536

# 水位线调整(1到1000，越大内存回收越积极)
# 例如设为1000，则表示10%，表示内存水位线low-min-high之间，各相差RamSize * 10%
# 剩余内存低于low的值开始回收内存，直到内存不低于high的值。如果我有8G物理内存，那么回收10%就是一口气回收了大概800M，这个过程需要消耗不少性能，导致短时间卡住
# 但是设置太小也会导致swap因为每次回收的内存量太少而效率过低，出现连续的卡顿掉帧
# 因此，请酌情设置watermark_scale_factor
watermark_scale_factor=25

# 设置kswapd进程cpu亲和
# 00001111，表示使用CPU4~7
# kswapd_cpus=00001111

# 由模块提供的增强服务，改进Swap使用效率
# off     禁用
# basic   启用 自动为进程设置分组，在内存严重不足时杀死一些进程
# lazy    启用 限制后台应用内存用量，在内存严重不足时杀死一些进程
daemon_service=basic